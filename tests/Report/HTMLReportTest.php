<?php
/**
 * Created by PhpStorm.
 * User: shiyu
 * Date: 2019-05-05
 * Time: 11:03
 */

namespace Chip\Tests\Report;

use Chip\Alarm;
use Chip\Report\HTMLReport;
use org\bovigo\vfs\vfsStream;
use org\bovigo\vfs\vfsStreamDirectory;
use PHPUnit\Framework\TestCase;

class HTMLReportTest extends TestCase
{
    /**
     * @var vfsStreamDirectory $root
     */
    protected $root;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->root = vfsStream::setup('root');
    }

    public function testFormatCode()
    {
        $report = new HTMLReport(vfsStream::url('root/1.html'));
        $data = $report->formatCode([
        'lines' => [
            [1, 'line 1', false],
            [2, 'line 2', true],
            [3, 'line 3', true],
            [4, '<img>', false],
        ],
        ]);
        $this->assertEquals($data, "1:line 1\n<span class='highlight'>2:line 2</span>\n<span class='highlight'>3:line 3</span>\n4:&lt;img&gt;");
    }

    public function testRender()
    {
        $report = new HTMLReport(vfsStream::url('root/2.html'));
        $alarm = \Mockery::mock(Alarm::class);
        $alarm->shouldReceive('formatOutput')->withAnyArgs()->andReturn([
            'level'   => 'danger',
            'message' => 'test_message',
            'lines'   => [
                ['1', 'line 1', false],
                ['2', 'line 2', true],
                ['3', 'line 3', true],
                ['4', 'line 4', false],
                ['5', 'line 5', false],
            ],
        ]);
        $report->feed('filename', 'code', $alarm);

        $alarm = \Mockery::mock(Alarm::class);
        $alarm->shouldReceive('formatOutput')->withAnyArgs()->andReturn([
            'level'   => 'danger',
            'message' => 'test_message',
            'lines'   => [
                ['6', 'line 6', false],
                ['7', 'line 7', false],
                ['8', 'line 8', false],
                ['9', 'line 9', true],
                ['10', 'line 10', false],
            ],
        ]);
        $report->feed('filename', 'code', $alarm);
        $report->render();

        $this->assertTrue($this->root->hasChild('2.html'));

        $content = file_get_contents($this->root->getChild('2.html')->url());
        $this->assertContains("<span class='highlight'>3:line 3</span>", $content);
        $this->assertContains("<span class='highlight'>9:line 9</span>", $content);
    }
}
